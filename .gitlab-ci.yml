start-github-runner-ubuntu:
    stage: build
    id_tokens:
        CI_JOB_ID_TOKEN:
            aud: https://vault.azureolympos.com
    image:
        name: hashicorp/vault:latest
        pull_policy: if-not-present
    before_script:
        - apk add --update curl jq && rm -rf /var/cache/apk/*
    script: |
        export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=gitlab-runner jwt=$CI_JOB_ID_TOKEN)"
        export RUNNER_CREATION_TOKEN="$(vault kv get -field=token gitlab/runner-creation)"
        export TAILSCALE_OAUTH_CLIENT_ID="$(vault kv get -field=client_id tailscale/oauth)"
        export TAILSCALE_OAUTH_CLIENT_SECRET="$(vault kv get -field=client_secret tailscale/oauth)"
        export TAILSCALE_TAGS='tag:ci'
        export GITHUB_TOKEN="$(vault kv get -field=token github/developer)"
        response=$(curl --request POST --url "${GITLAB_ADDR}/api/v4/user/runners" --data "runner_type=project_type" --data "project_id=${CI_PROJECT_ID}" --data "tag_list=githubrunner-ubuntu-${CI_PROJECT_ID}-${CI_PIPELINE_IID}" --header "PRIVATE-TOKEN: ${RUNNER_CREATION_TOKEN}")
        export RUNNER_AUTHENTICATION_TOKEN=$(echo $response | jq -r '.token')
        curl -H "Authorization: token ${GITHUB_TOKEN}" \
        -H 'Accept: application/vnd.github.everest-preview+json' \
        "https://api.github.com/repos/${GITHUB_REPO}/actions/workflows/gitlab-runner-ubuntu.yaml/dispatches" \
        -d '{"ref": "main", "inputs": {"runner_authentication_token": "'${RUNNER_AUTHENTICATION_TOKEN}'", "gitlab_url": "'${GITLAB_ADDR}'", "tailscale_oauth_client_id": "'${TAILSCALE_OAUTH_CLIENT_ID}'", "tailscale_oauth_client_secret": "'${TAILSCALE_OAUTH_CLIENT_SECRET}'", "tailscale_tags": "'${TAILSCALE_TAGS}'", "docker_image": "'docker:19.03.12'", "delete_runner": "true"}}'

build:
    stage: build
    image:
        name: ghcr.io/cicirello/pyaction:latest
        entrypoint: ['']
    before_script:
        - ARCH="$(dpkg --print-architecture)"
        - curl https://dl.min.io/client/mc/release/linux-${ARCH}/mc --create-dirs -o $HOME/.local/minio/bin/mc
        - chmod +x $HOME/.local/minio/bin/mc
        - export PATH=$PATH:$HOME/.local/minio/bin/
        - mc alias set oci $OCI_API_ENDPOINT $OCI_ACCESS_KEY $OCI_SECRET_KEY
        - apt-get -y update
        - apt-get install -y default-jdk bzip2 zip tar gzip
        - curl -s "https://get.sdkman.io" | bash
        - source "/root/.sdkman/bin/sdkman-init.sh"
        - sdk install gradle 8.10
    script:
        - ./gradlew clean build -x test
        - mc cp --recursive ./build/libs/*.jar oci/gitlab-ripmeapp/
    tags:
        - githubrunner-ubuntu-${CI_PROJECT_ID}-${CI_PIPELINE_IID}

deploy:
    stage: deploy
    image:
        name: ghcr.io/cicirello/pyaction:latest
        entrypoint: ['']
    dependencies:
        - build
    before_script:
        - ARCH="$(dpkg --print-architecture)"
        - curl https://dl.min.io/client/mc/release/linux-${ARCH}/mc --create-dirs -o $HOME/.local/minio/bin/mc
        - chmod +x $HOME/.local/minio/bin/mc
        - export PATH=$PATH:$HOME/.local/minio/bin/
        - mc alias set oci $OCI_API_ENDPOINT $OCI_ACCESS_KEY $OCI_SECRET_KEY
    script:
        - gh repo clone metril/ripmeapp metril_ripmeapp
        - cd ./metril_ripmeapp
        - mkdir compiled
        - mc cp --recursive oci/gitlab-ripmeapp/ ./compiled/
        - DATE=`TZ=":America/New_York" date +%Y-%m-%d_%H-%M`
        - TITLE=ripmeapp_${DATE}
        - gh release delete latest --yes
        - gh release create --latest --target master -t $TITLE latest ./compiled/*
    tags:
        - docker
        - amd64